from openai import OpenAI
import requests
import yaml
from models.markov._train_markov_model import load_model, generate_text



# Load config file
# This will pull API endpoints and the system prompt.
with open("config.yaml", "r") as f:
    config = yaml.safe_load(f)


def deepseek_model(text: str) -> str:
    """
    Use the deepseek LLM to produce a response related to
    the `text`. See `config.yaml` for the system prompt.

    Parameters
    ----------
    text : str
        Something said by a user.
    
    Returns
    -------
    str
        The response from the deepseek model.
    
    NOTE: temperature is hard-coded to 1.5, for poetry.
    See: https://api-docs.deepseek.com/quick_start/parameter_settings
    """
    with open("deepseek_api_key.txt", "r") as f:
        deepseek_api_key = f.read().strip()


    client = OpenAI(api_key=deepseek_api_key,
                    base_url="https://api.deepseek.com")

    # Send request to the API.
    response = client.chat.completions.create(
        model="deepseek-chat",
        messages=[
            {"role": "system",
             "content": config["system_prompt"]},
            {"role": "user",
             "content": text},
        ],
        stream=False,
        temperature=1.5
    )

    return response.choices[0].message.content


def tiny_llama_model(text: str) -> str:
    """
    Use the tiny-llama LLM to produce a response related to
    the `text`. See `config.yaml` for the system prompt.

    Parameters
    ----------
    text : str
        Something said by a user.
    
    Returns
    -------
    str
        The response from the tiny-llama model.
    """
    # system_prompt = config["system_prompt"] # not yet implemented
    full_prompt = f"Human: {config['system_prompt']} {text} ### Assistant:"

    # Hit the API endpoint.
    response = requests.post(url=config["tiny_llama_api_url"],
                             json={"prompt": full_prompt},
                             headers={"Content-Type": "application/json"})

    # Check the server's response.
    if response.ok:

        return response.json()["reply"]

    else:
        print("Error:", response.status_code, response.text)

        return "Model offline!"


def random_markov_model(length : int,
                        start_word : str,
                        model_path : str) -> str:
    """
    Uses a random markov model trained off some poetry.
    NOTE: model output is not conditioned off user input.

    Parameters
    ----------
    length : int
        How many words should be in the output.
    start_word : str
        The first word in the response.
        NOTE: this word must belong to the vocabulary.
    model_path : str
        Path to the trained model.
    
    Returns
    -------
    str
        Words in a string.
    """
    # Load model
    loaded_model = load_model(model_path)

    # Generate and print text
    text = generate_text(loaded_model,
                         start_word=start_word,
                         length=length)

    return text


def get_response(text : str,
                 model : str) -> str:
    """
    Produces a text reply to a text input.

    Parameters
    ----------
    text : str
        The input text that the response is conditioned on.
    model : str
        Which model to use. Current models:
            - "echo"
                Repeats back the input text.
            - "random_markov"
                Random text from a trained markov model.
            - "tiny_llama"
                A small LLM

    Returns
    ------
    str
        The reply generated by the model.
    """
    if model == "echo":
        response = text

    if model == "random_markov":
        response = random_markov_model(length=30,
                                       start_word="the",
                                       model_path="models/markov/_random_poems_model.pkl")

    if model == "tiny_llama":
        response = tiny_llama_model(text=text)

    if model == "deepseek":
        response = deepseek_model(text)

    return response
